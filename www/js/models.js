// Generated by CoffeeScript 1.6.3
var ExpenseItem, ExpenseMonth, ExpenseStore;

ExpenseStore = (function() {
  function ExpenseStore() {}

  ExpenseStore.months = function() {
    return Object.keys(localStorage).sort().reverse();
  };

  return ExpenseStore;

})();

ExpenseMonth = (function() {
  function ExpenseMonth(dateString) {
    this.dateString = dateString;
    this.items = [];
  }

  ExpenseMonth.prototype.month = function() {
    return new Date(this.dateString).getMonth() + 1;
  };

  ExpenseMonth.prototype.year = function() {
    return new Date(this.dateString).getFullYear();
  };

  ExpenseMonth.prototype.sum = function() {
    var i, n, _i, _len, _ref;
    n = 0.00;
    _ref = this.items;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      n += i.amount;
    }
    return n;
  };

  ExpenseMonth.prototype.isPersisted = function() {
    if (localStorage.getItem(this.year() + '-' + this.month())) {
      return true;
    }
    return false;
  };

  ExpenseMonth.prototype.save = function() {
    var i, json, _i, _len, _ref;
    this.jsonItems = [];
    _ref = this.items;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      this.jsonItems.push(JSON.stringify(i));
    }
    json = JSON.stringify(this);
    return localStorage.setItem(this.year() + '-' + this.month(), json);
  };

  ExpenseMonth.find = function(year, month) {
    var ls;
    if (ls = localStorage.getItem(year + '-' + month)) {
      return ExpenseMonth.fromJson(ls);
    }
    return null;
  };

  ExpenseMonth.fromJson = function(json) {
    var em, item, jItem, jsonObj, _i, _len, _ref;
    jsonObj = JSON.parse(json);
    em = new ExpenseMonth(jsonObj.dateString);
    _ref = jsonObj.jsonItems;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      jItem = _ref[_i];
      item = JSON.parse(jItem);
      em.items.push(new ExpenseItem(item.dateString, item.amount, item.category));
    }
    return em;
  };

  ExpenseMonth.fromStorageKey = function(key) {
    var ls;
    if (ls = localStorage.getItem(key)) {
      return ExpenseMonth.fromJson(ls);
    }
    return null;
  };

  return ExpenseMonth;

})();

ExpenseItem = (function() {
  function ExpenseItem(dateString, amount, category) {
    this.dateString = dateString;
    this.amount = amount;
    this.category = category;
  }

  ExpenseItem.prototype.year = function() {
    return new Date(this.dateString).getFullYear();
  };

  ExpenseItem.prototype.month = function() {
    return new Date(this.dateString).getMonth() + 1;
  };

  ExpenseItem.prototype.day = function() {
    return new Date(this.dateString).getDay();
  };

  ExpenseItem.prototype.save = function() {
    var em, json;
    json = JSON.stringify(this);
    em = ExpenseMonth.find(this.year(), this.month()) || new ExpenseMonth(this.dateString);
    em.items.unshift(this);
    return em.save();
  };

  return ExpenseItem;

})();
